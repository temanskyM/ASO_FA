# This file is a template, and might need editing before it works on your project.
# This is the Gradle build system for JVM applications
# https://gradle.org/
# https://github.com/gradle/gradle
image: gradle:latest

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

build_gradle:
  stage: build
  script: 
    - gradle --build-cache assemble
    - mkdir buildAll
    - echo GIT_HASH=$CI_COMMIT_SHORT_SHA > web-variables.env
    - sed -n "s#include\s*'\(.*\)'#\1#p" settings.gradle | awk '{print $0"/build/libs/*.jar"}' | awk '{print "cp "$0" buildAll"}' |xargs -n 3 |sh
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle
  artifacts:
    paths:
      - buildAll/*.jar
    expire_in: 1 day



deploy_UART:
  stage: deploy
  image: ubuntu:latest
  before_script:
    - apt-get update -qq && apt-get install -y -qq sshpass
  # Setup SSH deploy keys
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa $HOST > ~/.ssh/known_hosts
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - sshpass -V
    - export SSHPASS=$USER_PASS
    - sshpass -e ssh -o stricthostkeychecking=no $USER@$HOST echo GIT_HASH=$CI_COMMIT_SHORT_SHA > /project/ASO_FA/buildAll/web-variables.env
    - sshpass -e scp -o StrictHostKeyChecking=no buildAll/uart*.jar $USER@$HOST:/project/ASO_FA/buildAll
    - sshpass -e ssh -o stricthostkeychecking=no $USER@$HOST docker-compose -f /project/ASO_FA/uart-service/docker-compose.yml up -d --force 
  only:
    - master

deploy_Web:
  stage: deploy
  image: ubuntu:latest
  before_script:
    - apt-get update -qq && apt-get install -y -qq sshpass
  # Setup SSH deploy keys
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa $HOST > ~/.ssh/known_hosts
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - sshpass -V
    - export SSHPASS=$USER_PASS
    - sshpass -e ssh -o stricthostkeychecking=no $USER@$HOST echo GIT_HASH=$CI_COMMIT_SHORT_SHA > /project/ASO_FA/buildAll/web-variables.env
    - sshpass -e scp -o StrictHostKeyChecking=no buildAll/web*.jar $USER@$HOST:/project/ASO_FA/buildAll
    - sshpass -e ssh -o stricthostkeychecking=no $USER@$HOST docker-compose -f /project/ASO_FA/web/docker-compose.yml up -d --force
  only:
    - master

deploy_Api:
  stage: deploy
  image: ubuntu:latest
  before_script:
    - apt-get update -qq && apt-get install -y -qq sshpass
  # Setup SSH deploy keys
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa $HOST > ~/.ssh/known_hosts
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - sshpass -V
    - export SSHPASS=$USER_PASS
    - sshpass -e ssh -o stricthostkeychecking=no $USER@$HOST echo GIT_HASH=$CI_COMMIT_SHORT_SHA > /project/ASO_FA/buildAll/web-variables.env
    - sshpass -e scp -o StrictHostKeyChecking=no buildAll/api*.jar $USER@$HOST:/project/ASO_FA/buildAll
    - sshpass -e ssh -o stricthostkeychecking=no $USER@$HOST docker-compose -f /project/ASO_FA/api/docker-compose.yml up -d --force
  only:
    - master

deploy_Stage:
  stage: deploy
  image: ubuntu:latest
  before_script:
    - apt-get update -qq && apt-get install -y -qq sshpass
  # Setup SSH deploy keys
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa $HOST > ~/.ssh/known_hosts
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - sshpass -V
    - export SSHPASS=$USER_PASS
    - sshpass -e ssh -o stricthostkeychecking=no $USER@$HOST echo GIT_HASH=$CI_COMMIT_SHORT_SHA > /project/ASO_FA/buildAll/web-variables.env
    - sshpass -e scp -o StrictHostKeyChecking=no buildAll/web*.jar $USER@$HOST:/project/ASO_FA/buildAll
    - sshpass -e ssh -o stricthostkeychecking=no $USER@$HOST docker-compose -f /project/ASO_FA/stage/docker-compose.yml up -d --force


